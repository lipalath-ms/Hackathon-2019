{
	"name": "required_data_flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "HC01CareerStage",
						"type": "DatasetReference"
					},
					"name": "HC01CareerStage"
				},
				{
					"dataset": {
						"referenceName": "HC01Employee",
						"type": "DatasetReference"
					},
					"name": "HC01Employee"
				},
				{
					"dataset": {
						"referenceName": "HC01EmployeePosition",
						"type": "DatasetReference"
					},
					"name": "HC01EmployeePosition"
				},
				{
					"dataset": {
						"referenceName": "HC01OrgBusiness",
						"type": "DatasetReference"
					},
					"name": "HC01OrgBusiness"
				},
				{
					"dataset": {
						"referenceName": "HC01Person",
						"type": "DatasetReference"
					},
					"name": "HC01Person"
				},
				{
					"dataset": {
						"referenceName": "HC01PersonCareerStage",
						"type": "DatasetReference"
					},
					"name": "HC01PersonCareerStage"
				},
				{
					"dataset": {
						"referenceName": "HC01ReportsToHierarchyTree",
						"type": "DatasetReference"
					},
					"name": "HC01ReportsToHierarchyTree"
				},
				{
					"dataset": {
						"referenceName": "HCH01JobFunction",
						"type": "DatasetReference"
					},
					"name": "HCH01JobFunction"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_SQL_Test",
						"type": "DatasetReference"
					},
					"name": "Output"
				}
			],
			"transformations": [
				{
					"name": "HC01CareerStageProjection"
				},
				{
					"name": "HC01EmployeeProjection"
				},
				{
					"name": "JoinedStream"
				},
				{
					"name": "Metrics"
				},
				{
					"name": "HC01EmployeePositionProjection"
				},
				{
					"name": "HC01OrgBusinessProjection"
				},
				{
					"name": "HC01PersonProjection"
				}
			],
			"script": "source(output(\n\t\tActiveInd as string,\n\t\tCareerStageDesc as string,\n\t\tCareerStageName as string,\n\t\tCareerStageNumber as integer,\n\t\tFromDate as timestamp,\n\t\tToDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> HC01CareerStage\nsource(output(\n\t\tAcquiredCompanyHireDate as timestamp,\n\t\tApplicantCode as string,\n\t\tBusinessCardTitleName as string,\n\t\tCompanyStartDate as timestamp,\n\t\tCompressedWorkweekInd as string,\n\t\tCountryStartDate as timestamp,\n\t\tEmployeePhotoConsentInd as string,\n\t\tFirstMSJVHireDate as timestamp,\n\t\tFirstRegularHireDate as timestamp,\n\t\tFlexTimeInd as string,\n\t\tInternCoopEstEndDate as timestamp,\n\t\tInternCoopEstEndReminderDate as timestamp,\n\t\tLastDayWorkedDate as timestamp,\n\t\tMobilePhoneOneNbr as string,\n\t\tMobilePhoneTwoNbr as string,\n\t\tMonthsAsManager as integer,\n\t\tMonthsAtMS as integer,\n\t\tMostRecentHireDate as timestamp,\n\t\tMSRegularOrgSize as integer,\n\t\tPagerOneNbr as string,\n\t\tPayrollIdNbr as string,\n\t\tPayScaleAreaCode as string,\n\t\tPBEEstimatedEndDate as timestamp,\n\t\tPBEEstimatedEndReminderDate as timestamp,\n\t\tPersonnelNumber as integer,\n\t\tPrimaryContactInd as string,\n\t\tRetailBenefitsEligibilityDate as timestamp,\n\t\tServiceAwardDate as timestamp,\n\t\tTeleworkerDaysWorkedAtHome as integer,\n\t\tTerminationDate as timestamp,\n\t\tVacationServiceDate as timestamp,\n\t\tWorkScheduleRuleName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> HC01Employee\nsource(output(\n\t\tIncrementalPositionInd as string,\n\t\tManagerOfManagersInd as string,\n\t\tPositionFromDate as timestamp,\n\t\tPositionName as string,\n\t\tPositionNumber as integer,\n\t\tProjectCode as string,\n\t\tStandardTitle as string,\n\t\tStandardTitleNumber as integer,\n\t\tSupervisorInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> HC01EmployeePosition\nsource(output(\n\t\tBusiness as string,\n\t\tOrganization as string,\n\t\tOrgBusinessID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> HC01OrgBusiness\nsource(output(\n\t\tAcquiredCompanyPersonID as string,\n\t\tAddressBookDifferentiatorName as string,\n\t\tAddressBookTitleDesc as string,\n\t\tAlternateEmail as string,\n\t\tBuildingID as integer,\n\t\tBusinessFullName as string,\n\t\tBusinessLastName as string,\n\t\tEmailName as string,\n\t\tFirstName as string,\n\t\tFullName as string,\n\t\tGDPRActionInd as string,\n\t\tLastName as string,\n\t\tLocalLanguageFirstName as string,\n\t\tLocalLanguageLastName as string,\n\t\tLocationAreaCode as string,\n\t\tLocationAreaDetail as string,\n\t\tLocationCity as string,\n\t\tMiddleName as string,\n\t\tMobileBldgAssociationID as integer,\n\t\tOrgProject as string,\n\t\tPersonnelAreaCode as string,\n\t\tPersonnelNumber as integer,\n\t\tPersonnelSubAreaCode as string,\n\t\tPersonStatusCode as string,\n\t\tPreferredFirstName as string,\n\t\tRoomNumber as string,\n\t\tSecondLastName as string,\n\t\tSuffixName as string,\n\t\tUSCitizenGCHolderInd as string,\n\t\tUseBusinessLastNameInd as string,\n\t\tWorkFaxNbr as string,\n\t\tWorkPhoneNbr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> HC01Person\nsource(output(\n\t\tAssignmentTypeDesc as string,\n\t\tCareerStageNumber as integer,\n\t\tFromDate as timestamp,\n\t\tPersonnelNumber as integer,\n\t\tToDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> HC01PersonCareerStage\nsource(output(\n\t\tChildcount as integer,\n\t\tDescendantcount as integer,\n\t\tEmail as string,\n\t\tFullname as string,\n\t\tHaschildrenInd as string,\n\t\tLeftNode as integer,\n\t\tNodeType as string,\n\t\tObsoletePCInd as string,\n\t\tParentNodeID as integer,\n\t\tPCOwnerInd as string,\n\t\tPersonnelNumber as integer,\n\t\tPositionNumber as integer,\n\t\tProfitCenterActiveInd as string,\n\t\tProfitCenterCode as string,\n\t\tProfitCenterType as string,\n\t\tRightNode as integer,\n\t\tTreelevel as integer,\n\t\tTreeNodeID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> HC01ReportsToHierarchyTree\nsource(output(\n\t\tJobFunctionCode as string,\n\t\tJobFunctionDesc as string,\n\t\tJobFunctionSummaryCode as string,\n\t\tJobFunctionSummaryDesc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> HCH01JobFunction\nHC01CareerStage select(mapColumn(\n\t\tCareerStageNumber\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HC01CareerStageProjection\nHC01Employee select(mapColumn(\n\t\tCompanyStartDate,\n\t\tCountryStartDate,\n\t\tFirstMSJVHireDate,\n\t\tFirstRegularHireDate,\n\t\tLastDayWorkedDate,\n\t\tMostRecentHireDate,\n\t\tPersonnelNumber\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HC01EmployeeProjection\nHC01CareerStageProjection, HC01EmployeeProjection join(HC01PersonCareerStageProjection@CareerStageNumber == HC01CareerStageProjection@CareerStageNumber,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> JoinedStream\nJoinedStream aggregate(groupBy(CareerStageName = CareerStageName),\n\tCount = countDistinct(HC01PersonCareerStageProjection@CareerStageNumber)) ~> Metrics\nHC01EmployeePosition select(mapColumn(\n\t\tManagerOfManagersInd,\n\t\tPositionFromDate,\n\t\tPositionName,\n\t\tPositionNumber,\n\t\tStandardTitle,\n\t\tStandardTitleNumber,\n\t\tSupervisorInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HC01EmployeePositionProjection\nHC01OrgBusiness select(mapColumn(\n\t\tBusiness,\n\t\tOrganization,\n\t\tOrgBusinessID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HC01OrgBusinessProjection\nHC01Person select(mapColumn(\n\t\tLocationAreaCode,\n\t\tPersonnelAreaCode,\n\t\tPersonnelNumber,\n\t\tPersonnelSubAreaCode,\n\t\tPersonStatusCode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HC01PersonProjection\nMetrics sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCareerStageName,\n\t\tCount\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Output"
		}
	}
}